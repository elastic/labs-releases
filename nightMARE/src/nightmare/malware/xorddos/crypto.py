# coding: utf-8

import lief
from smda.common import SmdaFunction

from nightmare.analysis import bits

SIZE = 128


def __calculate_basic_block_start(
    fn: SmdaFunction.SmdaFunction,
    address: int,
) -> int:
    block_start = address
    while block_start >= fn.offset:  # type: ignore
        if block_start in fn.blocks:  # type: ignore
            return block_start
        block_start -= 1
    raise RuntimeError("Failed to calculate basic block start")


def __get_encrypted_candidates(
    basic_block_address: int, function: SmdaFunction.SmdaFunction
) -> list[int]:
    candidates = list()
    for ins in function.getInstructionsForBlock(basic_block_address):
        candidates += ins.getDataRefs()
    return candidates


def find_encrypted_candidates(function: SmdaFunction.SmdaFunction) -> list[int]:
    """
    Finds the encrypted data within the given SmdaFunction.

    :param function: The SmdaFunction object to search for encrypted data candidates.
    :return: A list of virtual addresses that are potential encrypted data candidates.
    """

    candidates = list()
    for xref in function.getCodeInrefs():
        basic_block_start = __calculate_basic_block_start(
            xref.from_function, xref.from_instruction.offset
        )
        candidates += __get_encrypted_candidates(basic_block_start, xref.from_function)

    return candidates


def decrypt_data(elf: lief.Binary, addresses: list[int], key: bytes) -> list[bytes]:
    """
    Decrypts data at specified addresses in the provided ELF binary using the given key.

    :param elf: The ELF binary object.
    :param addresses: A list of virtual addresses where the encrypted data is located.
    :param key: The key used for decryption.
    :return: A list of decrypted bytes.
    """

    decrypted_data = list()
    for address in addresses:
        encrypted_data = elf.get_content_from_virtual_address(address, SIZE)
        if encrypted_data.nbytes < 0:
            continue
        decrypted_data.append(bits.xor(encrypted_data, key).split(b"\x00")[0])
    return decrypted_data
