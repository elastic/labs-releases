# coding: "utf-8"

import lief

from nightmare.analysis import bits
from nightmare import cast
from nightmare import utils

KEY_OFFSET = 4
KEY_SIZE = 1024


def extract(file: bytes) -> bytes:
    """
    This function extracts StrelaStealer from packer code and returns the decrypted
    StrelaStealer executable.

    :param file: The bytes of the file being extracted
    :return: Unpacked StrelaStealer executable
    :raises RuntimeError: If the binary cannot be parsed or the .data section is not found
    """

    lief.logging.disable()

    if not (PE := lief.parse(file)):
        raise RuntimeError("Failed to parse PE file")

    if not (data := utils.get_section_content(PE, ".data")):
        raise RuntimeError(".data section not found")

    payload_size = cast.u32(data[:KEY_OFFSET])
    key = data[KEY_OFFSET : KEY_OFFSET + KEY_SIZE]
    payload = data[KEY_OFFSET + KEY_SIZE : KEY_OFFSET + KEY_SIZE + payload_size]
    decrypted_payload = bits.xor(payload, key)

    return decrypted_payload
