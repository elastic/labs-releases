# coding: utf-8

import dotnetfile
import base64
import yara

from nightmare import cast
from nightmare.analysis import bits

CONFIG_RULE = yara.compile(
    source="""rule core_key_rule: bar {strings: $a = {72 ?? ?? ?? 70 80 ?? ?? ?? 04 72 ?? ?? ?? 70 80 ?? ?? ?? 04 72 ?? ?? ?? 70 80 ?? ?? ?? 04 72 ?? ?? ?? 70 80 ?? ?? ?? 04 [0-6] 2A} condition: $a}"""
)

IP_OFFSET = 1
ID_OFFSET = 11
XOR_KEY_OFFSET = 31
MESSAGE_OFFSET = 21


def __get_match_offset(yara_match: list) -> int:
    return yara_match[0].strings[0].instances[0].offset


def __get_stream_data(pe: dotnetfile.DotNetPE, stream_name: str) -> bytes:
    addr = pe.dotnet_stream_lookup[stream_name].address
    size = pe.dotnet_stream_lookup[stream_name].size
    return pe.get_data(addr, size)


def __get_user_string(data: bytes, offset: int) -> str:
    result = data[offset + 1 :].split(b"\x00\x00")[0] + b"\x00"
    if result[0] == 0:
        return ""

    return result.decode("utf-16")


def __decrypt_string(encrypted: str, xor_key: str) -> bytes:
    result = base64.b64decode(encrypted)
    return base64.b64decode(bits.xor(result, xor_key.encode()))


def extract(data: bytes) -> dict[str, str] | None:
    """
    Extracts configuration from a RedLine Stealer sample.


    :param data: The content of a RedLine Stealer sample.

    :return: The configuration extracted in a dictionary format of ip, id.
             None if extraction fails or encounters an exception.
    """
    pe = dotnetfile.DotNetPE(data)
    if not pe:
        return None
    us_stream_data = __get_stream_data(pe, "#US")
    config_match = CONFIG_RULE.match(data=data)
    if config_match == []:
        return None
    config_offset = __get_match_offset(config_match)
    encrypted_ip = __get_user_string(
        us_stream_data,
        cast.u32(data[config_offset + IP_OFFSET : config_offset + IP_OFFSET + 3]),
    )
    encrypted_id = __get_user_string(
        us_stream_data,
        cast.u32(data[config_offset + ID_OFFSET : config_offset + ID_OFFSET + 3]),
    )
    xor_key = __get_user_string(
        us_stream_data,
        cast.u32(
            data[config_offset + XOR_KEY_OFFSET : config_offset + XOR_KEY_OFFSET + 3]
        ),
    )
    ip = __decrypt_string(encrypted_ip, xor_key)
    id = __decrypt_string(encrypted_id, xor_key)

    return {"ip": ip.decode("utf-8"), "id": id.decode("utf-8"), "xor_key": xor_key}
