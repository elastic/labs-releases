# coding: utf-8

import re

from nightmare.malware.lobshot import crypto

IP_ADDRESS_REGEX = rb"^([0-9]{1,3}\.){3}[0-9]{1,3}$"
PORT_REGEX = rb"^[0-9]{1,5}$"


def __generate_encrypted_string_candidates(section_data: bytes) -> list[bytes]:
    candidates: list[bytes] = list()
    blocks = section_data.split(b"\x00")
    blocks = [x for x in blocks if x != b""]
    for block in blocks:
        if len(block) > 3 and not b"\\" in block:
            candidates.append(block)
    return candidates


def __parse_encrypted_string_candidates(
    candidates: list[bytes],
) -> tuple[bytes, int]:
    ip = None
    port = None

    for string in candidates:
        if ip and port:
            return ip, port

        decrypted_string = crypto.decrypt_string(string)
        if re.search(IP_ADDRESS_REGEX, decrypted_string):
            ip = decrypted_string
        if re.search(PORT_REGEX, decrypted_string):
            port = int(decrypted_string)

    raise RuntimeError("Configuration unsuccessful, could not extract IP/Port\n")


def parse(data: bytes) -> tuple[bytes, int]:
    """
    The function will search the configuration ip and port within the data blob
    :param: Data blob containing encrypted ip and port strings
    :return: Configuration ip and optionally port
    """
    candidates = __generate_encrypted_string_candidates(data)
    return __parse_encrypted_string_candidates(candidates)
